INSERT INTO RATINGS VALUES (782400,'New York','Ted Collins','P&C Insurance and Reinsurance','New York','Mark Hewlett','European Insurance & Lloyd"s','2001-09-24','a2','Downgrade');









'INSERT INTO RATINGS VALUES ('+tokens[4]+',"'+g[0]+'","'+g[1]+'","'+g[2]+'","'+g[3]+'","'+g[4]+'","'+g[5]+'","'+converter(w)+'","'+c+'","'+locations[i+4]+'";)'


CREATE TABLE RATINGS(
C_ID INT NOT NULL,
A1_LOCATION VARCHAR(50) NOT NULL,
A1_NAME VARCHAR(50) NOT NULL,
A1_POS VARCHAR(50) NOT NULL,
A1_DEPT VARCHAR(50) NOT NULL,
A2_LOCATION VARCHAR(50) NOT NULL,
A2_NAME VARCHAR(50) NOT NULL,
A2_POS VARCHAR(50) NOT NULL,
A2_DEPT VARCHAR(50) NOT NULL,
RATINGS_DATE DATE);

 SELECT * FROM (SELECT  A1_NAME, COUNT(RATINGS_DATE) AS TOTAL_REPORTS
FROM RATINGS1
GROUP BY A1_NAME) AS TEMP ORDER BY TEMP.TOTAL_REPORTS DESC;

//total mno of reports of persons as analysts one
SELECT SUM(TEMP1.TOTAL_REPORTS) FROM (SELECT * FROM (SELECT  A1_NAME, COUNT(RATINGS_DATE) AS TOTAL_REPORTS
FROM RATINGS1
GROUP BY A1_NAME) AS TEMP ORDER BY TEMP.TOTAL_REPORTS DESC) AS TEMP1;

//When only analysing analysts 2 their first and last dates
SELECT A2_NAME,MIN(RATINGS_DATE) AS FIRST_REPORT, MAX(RATINGS_DATE) AS LAST_REPORT FROM RATINGS1 GROUP BY A2_NAME;

//here only analysing first anl last dates of only common intersection anlaysts
SELECT TEMP.A1_NAME, TEMP.FIRST_REPORT, TEMP.LAST_REPORT,TEMP1.FIRST_REPORT, TEMP1.LAST_REPORT FROM (SELECT A1_NAME,MIN(RATINGS_DATE) AS FIRST_REPORT, MAX(RATINGS_DATE) AS LAST_REPORT FROM RATINGS1 GROUP BY A1_NAME) AS TEMP INNER JOIN (SELECT A2_NAME,MIN(RATINGS_DATE) AS FIRST_REPORT, MAX(RATINGS_DATE) AS LAST_REPORT FROM RATINGS1 GROUP BY A2_NAME) AS TEMP1 ON TEMP.A1_NAME=TEMP1.A2_NAME ;

 SELECT TEMP.A1_NAME,LEAST(TEMP.FIRST_REPORT,TEMP1.FIRST_REPORT) AS FIRST_REPORT,GREATEST(TEMP1.LAST_REPORT,TEMP.LAST_REPORT) AS LAST_REPORT FROM (SELECT A1_NAME,MIN(RATINGS_DATE) AS FIRST_REPORT, MAX(RATINGS_DATE) AS LAST_REPORT FROM RATINGS1 GROUP BY A1_NAME) AS TEMP INNER JOIN (SELECT A2_NAME,MIN(RATINGS_DATE) AS FIRST_REPORT, MAX(RATINGS_DATE) AS LAST_REPORT FROM RATINGS1 GROUP BY A2_NAME) AS TEMP1 ON TEMP.A1_NAME=TEMP1.A2_NAME ;

//This is for all the analysts their first and the last report 

SELECT TEMP.A1_NAME,LEAST(TEMP.FIRST_REPORT,TEMP1.FIRST_REPORT) AS FIRST_REPORT,GREATEST(TEMP1.LAST_REPORT,TEMP.LAST_REPORT) AS LAST_REPORT FROM (SELECT A1_NAME,MIN(RATINGS_DATE) AS FIRST_REPORT, MAX(RATINGS_DATE) AS LAST_REPORT FROM RATINGS1 GROUP BY A1_NAME) AS TEMP INNER JOIN (SELECT A2_NAME,MIN(RATINGS_DATE) AS FIRST_REPORT, MAX(RATINGS_DATE) AS LAST_REPORT FROM RATINGS1 GROUP BY A2_NAME) AS TEMP1 ON TEMP.A1_NAME=TEMP1.A2_NAME UNION
SELECT A1_NAME,MIN(RATINGS_DATE) AS FIRST_REPORT, MAX(RATINGS_DATE) AS LAST_REPORT FROM RATINGS1 WHERE A1_NAME NOT IN (SELECT DISTINCT A2_NAME FROM RATINGS1) GROUP BY A1_NAME UNION
 SELECT A2_NAME,MIN(RATINGS_DATE) AS FIRST_REPORT, MAX(RATINGS_DATE) AS LAST_REPORT FROM RATINGS1 WHERE A2_NAME NOT IN (SELECT DISTINCT A1_NAME FROM RATINGS1) GROUP BY A2_NAME;

//Created view M_stay which takes into account how much a person has stayed in moodys
 SELECT *, (LAST_REPORT-FIRST_REPORT)/365 ::FLOAT AS STAY_PERIOD FROM M_STAY;
 
//this thing sorts them in descending order
 SELECT *, (LAST_REPORT-FIRST_REPORT)/365 ::FLOAT AS STAY_PERIOD FROM M_STAY ORDER BY STAY_PERIOD DESC;
 
 //Total no of reports for analyst who were occuring as both 1st and second anlaysts
 
SELECT TEMP.A1_NAME, TEMP.TOTAL_REPORTS+TEMP1.TOTAL_REPORTS AS TOTAL_REPORTS FROM (SELECT  A1_NAME, COUNT(RATINGS_DATE) AS TOTAL_REPORTS           
FROM RATINGS1
GROUP BY A1_NAME) AS TEMP
INNER JOIN                                            
(SELECT  A2_NAME, COUNT(RATINGS_DATE) AS TOTAL_REPORTS
FROM RATINGS1
GROUP BY A2_NAME) AS TEMP1
ON TEMP.A1_NAME=TEMP1.A2_NAME;


//Total no of reports for analyst who were occuring for all analyst
SELECT TEMP.A1_NAME, TEMP.TOTAL_REPORTS+TEMP1.TOTAL_REPORTS AS TOTAL_REPORTS FROM (SELECT  A1_NAME, COUNT(RATINGS_DATE) AS TOTAL_REPORTS           
FROM RATINGS1
GROUP BY A1_NAME) AS TEMP
INNER JOIN                                            
(SELECT  A2_NAME, COUNT(RATINGS_DATE) AS TOTAL_REPORTS
FROM RATINGS1
GROUP BY A2_NAME) AS TEMP1
ON TEMP.A1_NAME=TEMP1.A2_NAME;
UNION
SELECT  A1_NAME, COUNT(RATINGS_DATE) AS TOTAL_REPORTS  FROM RATINGS1 WHERE A1_NAME NOT IN (SELECT A2_NAME FROM RATINGS1) GROUP BY A1_NAME
UNION
SELECT  A2_NAME, COUNT(RATINGS_DATE) AS TOTAL_REPORTS  FROM RATINGS1 WHERE A2_NAME NOT IN (SELECT A1_NAME FROM RATINGS1) GROUP BY A2_NAME

//Here considering only analyst 2, we are ordering by dates and counting total no of reports published on particular date
SELECT RATINGS_DATE, COUNT(RATINGS_DATE) FROM RATINGS1 WHERE A2_NAME='Peter Abdill'GROUP BY RATINGS_DATE ORDER BY RATINGS_DATE DESC;

//So we created a view B from above query and now on this view we extracted year from above dates, group dates by year to get total no of reports per year, then sorted in ascending order.

SELECT EXTRACT(YEAR FROM RATINGS_DATE) AS YEAR, COUNT(*) AS TOTAL_REPORTS FROM B GROUP BY YEAR ORDER BY YEAR;

//Total no of reports published per year for every year from 2000 to 2013 by MOODYS
SELECT EXTRACT(YEAR FROM RATINGS_DATE) AS YEAR, COUNT(*) AS TOTAL_REPORTS FROM RATINGS1 GROUP BY YEAR ORDER BY YEAR;


//Total no of rating reports for 'John Diaz' as 1st analyst  

SELECT EXTRACT(YEAR FROM RATINGS_DATE) AS YEAR, COUNT(*) AS TOTAL_REPORTS FROM RATINGS1 WHERE A1_NAME='John Diaz' GROUP BY YEAR ORDER BY YEAR;

//Total no of rating reports for 'John Diaz' as 2nd analyst

SELECT EXTRACT(YEAR FROM RATINGS_DATE) AS YEAR, COUNT(*) AS TOTAL_REPORTS FROM RATINGS1 WHERE A2_NAME='John Diaz' GROUP BY YEAR ORDER BY YEAR;

//Total no of rating reports for 'John Diaz' as an analyst
SELECT EXTRACT(YEAR FROM RATINGS_DATE) AS YEAR, COUNT(*) AS TOTAL_REPORTS FROM RATINGS1 WHERE A1_NAME='John Diaz' GROUP BY YEAR ORDER BY YEAR;

//Calculating avg stay of people who were in moodys in period 2009-01-01 2009-01-31
 SELECT AVG(('2009-01-31'- FIRST_REPORT)/365 :: FLOAT) AS AVG_STAY FROM M_STAY WHERE A1_NAME NOT IN (SELECT A1_NAME FROM M_STAY WHERE LAST_REPORT<='2009-01-01' OR FIRST_REPORT>='2009-01-31');
 
 SELECT AVG((''- FIRST_REPORT)/365 :: FLOAT) AS AVG_STAY FROM M_STAY WHERE A1_NAME NOT IN (SELECT A1_NAME FROM M_STAY WHERE LAST_REPORT<='' OR FIRST_REPORT>='');
 
 //finding all those people who have written more than 10 reports and stayed in moodys for more than 2 yrs
  SELECT *,( (LAST_REPORT-FIRST_REPORT)/365 :: FLOAT) AS STAY FROM FULL_INFO WHERE TOTAL_REPORTS>10 AND ( (LAST_REPORT-FIRST_REPORT)/365 :: FLOAT)>2;

//total no of people who have less than 100 and more than 1 reports and we calculate their avg stay
SELECT AVG((LAST_REPORT-FIRST_REPORT)/365::FLOAT), COUNT(*) FROM FULL_INFO WHERE TOTAL_REPORTS<=100 AND TOTAL_REPORTS>1;

//total no of people who have less than 100 and more than 1 reports as well as their stay is more than 1 yr. We calculate their avg stay
SELECT AVG((LAST_REPORT-FIRST_REPORT)/365::FLOAT), COUNT(*) FROM FULL_INFO WHERE TOTAL_REPORTS<=300 AND TOTAL_REPORTS>1 AND ( (LAST_REPORT-FIRST_REPORT)/365 :: FLOAT)>1;

//total no of people who have less than 50 and more than 1 reports and were in moodys in period 2009-01-01 2009-01-31
SELECT A1_NAME FROM M_STAY WHERE A1_NAME NOT IN (SELECT A1_NAME FROM M_STAY WHERE LAST_REPORT<='2009-01-01' OR FIRST_REPORT>='2009-01-31')
INTERSECT
SELECT A1_NAME FROM FULL_INFO WHERE TOTAL_REPORTS<=50 AND TOTAL_REPORTS>1 AND ( (LAST_REPORT-FIRST_REPORT)/365 :: FLOAT)>1;

//NAMES of people who have less than 50 and more than 1 reports and were in moodys in period 2009-01-01 2009-01-31
SELECT * FROM FULL_INFO WHERE A1_NAME IN (SELECT A1_NAME FROM M_STAY WHERE A1_NAME NOT IN (SELECT A1_NAME FROM M_STAY WHERE LAST_REPORT<='2009-01-01' OR FIRST_REPORT>='2009-01-31')
INTERSECT                                                                     SELECT A1_NAME FROM FULL_INFO WHERE TOTAL_REPORTS<=50 AND TOTAL_REPORTS>1 AND ( (LAST_REPORT-FIRST_REPORT)/365 :: FLOAT)>1);

//Total no of people and their avg stay in moodys for people below 50 reports and in moodys in period 2009-01-01 2009-01-31

SELECT COUNT(*),AVG((LAST_REPORT-FIRST_REPORT)/365::FLOAT) AS STAY FROM FULL_INFO WHERE A1_NAME IN (SELECT A1_NAME FROM M_STAY WHERE A1_NAME NOT IN (SELECT A1_NAME FROM M_STAY WHERE LAST_REPORT<='2009-01-01' OR FIRST_REPORT>='2009-01-31')
INTERSECT
SELECT A1_NAME FROM FULL_INFO WHERE TOTAL_REPORTS<=50 AND TOTAL_REPORTS>1 AND ( (LAST_REPORT-FIRST_REPORT)/365 :: FLOAT)>1);

//Companies rated by people in year 2009 by people who had more than 500 and less than 2500 reports 
SELECT COUNT(DISTINCT C_ID) FROM RATINGS1 WHERE RATINGS_DATE> '2009-01-01' AND RATINGS_DATE<='2009-12-31' AND (A1_NAME IN (SELECT A1_NAME FROM FULL_INFO WHERE TOTAL_REPORTS>=500 AND TOTAL_REPORTS<2500) OR A2_NAME IN (SELECT A1_NAME FROM FULL_INFO WHERE TOTAL_REPORTS>=500 AND TOTAL_REPORTS<2500));

//people having more than 500 reports and less than 2500 rating in year 2009
(SELECT DISTINCT A1_NAME FROM RATINGS1 WHERE  RATINGS_DATE> '2009-01-01' AND RATINGS_DATE<='2009-12-31' UNION SELECT DISTINCT A2_NAME FROM RATINGS1 WHERE RATINGS_DATE> '2009-01-01' AND RATINGS_DATE<='2009-12-31')
INTERSECT SELECT A1_NAME FROM FULL_INFO WHERE TOTAL_REPORTS>=500 AND TOTAL_REPORTS<2500;

//people having more than 500 reports and less than 2500 rating  AND their stay in moodys is between 1 and 3 yearsin year 2009
(SELECT DISTINCT A1_NAME FROM RATINGS1 WHERE  RATINGS_DATE> '2009-01-01' AND RATINGS_DATE<='2009-12-31' UNION SELECT DISTINCT A2_NAME FROM RATINGS1 WHERE RATINGS_DATE> '2009-01-01' AND RATINGS_DATE<='2009-12-31')
INTERSECT SELECT A1_NAME FROM FULL_INFO WHERE TOTAL_REPORTS>=500 AND TOTAL_REPORTS<2500 AND ( (LAST_REPORT-FIRST_REPORT)/365 :: FLOAT>1) AND ( (LAST_REPORT-FIRST_REPORT)/365 :: FLOAT<=10);

//Total no of reports per month right from year 2000-2013, TO_CHAR(RATINGS_DATE, 'YYYY-MM') helped me extract year-month combination
SELECT TO_CHAR(RATINGS_DATE, 'YYYY-MM') AS YEAR_MONTH, COUNT(*) AS TOTL_REPORTS  FROM RATINGS1 GROUP BY YEAR_MONTH ORDER BY YEAR_MONTH;
